name: Pull, Retag, and Push Docker Images from ios-mcn-smo

on:
  workflow_dispatch:
    inputs:
      smo_version:
        description: 'Comma-separated versions for the ios-mcn-smo packages'
        required: true
        default: 'v2.8.1,v2.8.1,v0.0.5,v0.0.5,v0.0.5,v2.8.1,v0.0.4,v0.0.4,v0.0.4,v0.0.4,v0.0.4,v0.0.4,v0.0.4,v0.0.4'

jobs:
  pull_and_push_ios_mcn_smo:
    runs-on: ubuntu-latest

    steps:
      # Checkout the current repository (if needed)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Step 1: Pull, Retag, and Push all Images from ios-mcn-smo
      - name: Pull, Retag, and Push all Images from ios-mcn-smo
        run: |
          # Split the versions input into an array
          IFS=',' read -r -a VERSIONS <<< "${{ github.event.inputs.smo_version }}"

          # Define the list of packages for ios-mcn-smo
          SMO_PACKAGES=(
            "nonrtric-plt-a1policymanagementservice"
            "nonrtric-plt-rappcatalogue"
            "nonrtric-plt-informationcoordinatorservice"
            "nonrtric-plt-pmproducer"
            "nonrtric-plt-pmlog"
            "nonrtric-plt-dmaapadapter"
            "ves-collector"
            "pm-file-converter"
            "nonrtric-gateway"
            "nonrtric-controlpanel"
            "nonrtric-plt-auth-token-fetch"
            "sdnc-web-image"
            "sdnc-image"
          )

          # Loop through each package and version, then pull, retag, and push
          for i in "${!SMO_PACKAGES[@]}"; do
            PACKAGE="${SMO_PACKAGES[$i]}"
            VERSION="${VERSIONS[$i]}"
            SOURCE_IMAGE="ghcr.io/ios-mcn-smo/${PACKAGE}:${VERSION}"
            TARGET_IMAGE="ghcr.io/Test-IOS-MCN-CAZE/IOS_MCN/${PACKAGE}:${VERSION}-updated"

            echo "Pulling ${SOURCE_IMAGE}..."
            docker pull ${SOURCE_IMAGE}
            echo "Retagging ${SOURCE_IMAGE} to ${TARGET_IMAGE}..."
            docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}
            echo "Pushing ${TARGET_IMAGE}..."
            docker push ${TARGET_IMAGE}
          done
