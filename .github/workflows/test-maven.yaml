name: Transfer Maven Package from Be-with-DevOps

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: 'Group ID'
        required: true
        default: 'org.opendaylight.netconf'
      artifact_id:
        description: 'Artifact ID to transfer'
        required: true
        default: 'odl-netconf-model-rfc6241'
      version:
        description: 'Version to transfer'
        required: true
        default: '6.0.6'
      packaging:
        description: 'Package type (jar, war, etc.)'
        required: true
        default: 'jar'

jobs:
  transfer-maven-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout nivedita-releases repo
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Configure Maven settings
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << 'EOF'
        <settings>
          <servers>
            <server>
              <id>github-source</id>
              <username>${env.GITHUB_ACTOR}</username>
              <password>${env.SOURCE_GITHUB_TOKEN}</password>
            </server>
            <server>
              <id>github-nivedita</id>
              <username>${env.GITHUB_ACTOR}</username>
              <password>${env.GITHUB_TOKEN}</password>
            </server>
          </servers>
          <profiles>
            <profile>
              <id>github</id>
              <repositories>
                <repository>
                  <id>github-source</id>
                  <url>https://maven.pkg.github.com/Be-with-DevOps/demo-netconf-test.2</url>
                  <releases><enabled>true</enabled></releases>
                  <snapshots><enabled>true</enabled></snapshots>
                </repository>
              </repositories>
            </profile>
          </profiles>
          <activeProfiles>
            <activeProfile>github</activeProfile>
          </activeProfiles>
        </settings>
        EOF
      env:
        SOURCE_GITHUB_TOKEN: ${{ secrets.SOURCE_GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify source repository access and list packages
      run: |
        echo "Testing source repository access..."
        echo "Repository: Be-with-DevOps/demo-netconf-test.2"
        
        # Test repository access
        REPO_STATUS=$(curl -s -H "Authorization: token ${{ secrets.SOURCE_GITHUB_TOKEN }}" \
          "https://api.github.com/repos/Be-with-DevOps/demo-netconf-test.2" \
          -w "%{http_code}" -o /dev/null)
        echo "Repository access status: $REPO_STATUS"
        
        # List available packages
        echo "Available Maven packages:"
        curl -H "Authorization: token ${{ secrets.SOURCE_GITHUB_TOKEN }}" \
          "https://api.github.com/repos/Be-with-DevOps/demo-netconf-test.2/packages?package_type=maven" | \
          jq -r '.[] | "üì¶ " + .name + " | Version: " + (.versions[0].name // "N/A") + " | Updated: " + (.versions[0].updated_at // "N/A")' || echo "Failed to list packages via API"
    
    - name: Check if specific artifact exists
      id: check_artifact
      run: |
        echo "Checking if artifact exists..."
        echo "Looking for: ${{ github.event.inputs.group_id }}:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}"
        
        # Convert group ID to path format (org.opendaylight.netconf -> org/opendaylight/netconf)
        GROUP_PATH=$(echo "${{ github.event.inputs.group_id }}" | tr '.' '/')
        ARTIFACT_URL="https://maven.pkg.github.com/Be-with-DevOps/demo-netconf-test.2/$GROUP_PATH/${{ github.event.inputs.artifact_id }}/${{ github.event.inputs.version }}/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}"
        
        echo "Testing URL: $ARTIFACT_URL"
        
        HTTP_CODE=$(curl -H "Authorization: token ${{ secrets.SOURCE_GITHUB_TOKEN }}" \
          "$ARTIFACT_URL" \
          -w "%{http_code}" \
          -o /dev/null \
          -s)
        
        echo "HTTP response code: $HTTP_CODE"
        if [ "$HTTP_CODE" -eq 200 ]; then
          echo "artifact_exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Artifact is accessible via direct URL"
        else
          echo "artifact_exists=direct_failed" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Direct URL access failed (HTTP $HTTP_CODE), will try Maven resolution"
        fi
    
    - name: Download package using Maven dependency:get
      run: |
        mkdir -p temp local-repo
        
        echo "üîÑ Attempting to download using Maven dependency:get..."
        echo "Artifact: ${{ github.event.inputs.group_id }}:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}:${{ github.event.inputs.packaging }}"
        
        # First, try to resolve and download the artifact
        mvn dependency:get \
          -Dartifact=${{ github.event.inputs.group_id }}:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}:${{ github.event.inputs.packaging }} \
          -Dtransitive=false \
          -Dmaven.repo.local=./local-repo \
          -Dmdep.silent=false \
          -X
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Maven dependency:get succeeded"
          
          # Now copy the artifact to our temp directory
          echo "üì¶ Copying artifact to temp directory..."
          mvn dependency:copy \
            -Dartifact=${{ github.event.inputs.group_id }}:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}:${{ github.event.inputs.packaging }} \
            -DoutputDirectory=./temp/ \
            -Dmaven.repo.local=./local-repo \
            -Dmdep.stripVersion=false \
            -Dmdep.useRepositoryLayout=false
        else
          echo "‚ùå Maven dependency:get failed"
          exit 1
        fi
      env:
        SOURCE_GITHUB_TOKEN: ${{ secrets.SOURCE_GITHUB_TOKEN }}
    
    - name: Alternative direct download (fallback)
      if: failure()
      run: |
        echo "‚ö†Ô∏è Maven method failed, trying direct HTTP download..."
        mkdir -p temp
        
        GROUP_PATH=$(echo "${{ github.event.inputs.group_id }}" | tr '.' '/')
        DOWNLOAD_URL="https://maven.pkg.github.com/Be-with-DevOps/demo-netconf-test.2/$GROUP_PATH/${{ github.event.inputs.artifact_id }}/${{ github.event.inputs.version }}/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}"
        
        echo "üì• Downloading from: $DOWNLOAD_URL"
        
        curl -H "Authorization: token ${{ secrets.SOURCE_GITHUB_TOKEN }}" \
          "$DOWNLOAD_URL" \
          -o "./temp/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}" \
          -f \
          --show-error \
          --location \
          --progress-bar
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Direct download succeeded"
        else
          echo "‚ùå Direct download also failed"
          echo "Trying alternative URL formats..."
          
          # Try without group path conversion
          ALT_URL="https://maven.pkg.github.com/Be-with-DevOps/demo-netconf-test.2/${{ github.event.inputs.group_id }}/${{ github.event.inputs.artifact_id }}/${{ github.event.inputs.version }}/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}"
          echo "Trying: $ALT_URL"
          
          curl -H "Authorization: token ${{ secrets.SOURCE_GITHUB_TOKEN }}" \
            "$ALT_URL" \
            -o "./temp/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}" \
            -f \
            --show-error \
            --location \
            --progress-bar || exit 1
        fi
      env:
        SOURCE_GITHUB_TOKEN: ${{ secrets.SOURCE_GITHUB_TOKEN }}
    
    - name: Verify downloaded file
      run: |
        echo "üìÇ Contents of temp directory:"
        ls -la temp/
        
        EXPECTED_FILE="./temp/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}"
        
        if [ ! -f "$EXPECTED_FILE" ]; then
          echo "‚ùå Expected file not found: $EXPECTED_FILE"
          echo "Available files:"
          find temp -type f -name "*" 2>/dev/null || echo "No files found"
          
          # Check if there's any file that might be our artifact
          FOUND_FILE=$(find temp -name "*${{ github.event.inputs.artifact_id }}*" -type f | head -1)
          if [ -n "$FOUND_FILE" ]; then
            echo "Found similar file: $FOUND_FILE"
            echo "Renaming to expected filename..."
            mv "$FOUND_FILE" "$EXPECTED_FILE"
          else
            exit 1
          fi
        fi
        
        FILE_SIZE=$(stat -f%z "$EXPECTED_FILE" 2>/dev/null || stat -c%s "$EXPECTED_FILE")
        echo "‚úÖ File verification successful:"
        echo "   üìÅ Path: $EXPECTED_FILE"
        echo "   üìè Size: $FILE_SIZE bytes"
        
        if [ "$FILE_SIZE" -eq 0 ]; then
          echo "‚ùå Error: File is empty"
          exit 1
        fi
        
        # Show file type information
        file "$EXPECTED_FILE" || echo "File type detection not available"
    
    - name: Deploy to nivedita-releases
      run: |
        echo "üöÄ Deploying to nivedita-releases repository..."
        
        FILE_PATH="./temp/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}"
        TARGET_REPO="https://maven.pkg.github.com/nivedita-releases/maven-packages"
        
        echo "üì§ Source file: $FILE_PATH"
        echo "üéØ Target repo: $TARGET_REPO"
        echo "üè∑Ô∏è Target coordinates: com.github.nivedita-releases:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}"
        
        mvn deploy:deploy-file \
          -DgroupId=com.github.nivedita-releases \
          -DartifactId=${{ github.event.inputs.artifact_id }} \
          -Dversion=${{ github.event.inputs.version }} \
          -Dpackaging=${{ github.event.inputs.packaging }} \
          -Dfile="$FILE_PATH" \
          -DrepositoryId=github-nivedita \
          -Durl="$TARGET_REPO" \
          -DgeneratePom=true \
          -Dmdep.silent=false
        
        echo "‚úÖ Successfully deployed to nivedita-releases!"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Transfer Summary
      if: always()
      run: |
        echo ""
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üîÑ MAVEN PACKAGE TRANSFER SUMMARY"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üìç Source Repository: Be-with-DevOps/demo-netconf-test.2"
        echo "üì¶ Artifact: ${{ github.event.inputs.group_id }}:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}"
        echo "üéØ Target Repository: nivedita-releases/maven-packages"
        echo "üè∑Ô∏è New Coordinates: com.github.nivedita-releases:${{ github.event.inputs.artifact_id }}:${{ github.event.inputs.version }}"
        
        if [ -f "./temp/${{ github.event.inputs.artifact_id }}-${{ github.event.inputs.version }}.${{ github.event.inputs.packaging }}" ]; then
          echo "‚úÖ Status: SUCCESS - Package transferred successfully!"
          echo ""
          echo "üîß To use in your project, add to pom.xml:"
          echo "<dependency>"
          echo "  <groupId>com.github.nivedita-releases</groupId>"
          echo "  <artifactId>${{ github.event.inputs.artifact_id }}</artifactId>"
          echo "  <version>${{ github.event.inputs.version }}</version>"
          echo "</dependency>"
        else
          echo "‚ùå Status: FAILED - Package transfer unsuccessful"
        fi
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -rf temp local-repo
        echo "‚úÖ Cleanup completed"
