name: Pull, Retag, and Push Images from ios-mcn-core

on:
  workflow_dispatch:
    inputs:
      amf_version:
        description: 'Version tag for AMF (e.g., release-0.0.10)'
        required: true
        default: 'release-0.0.10'
      smf_version:
        description: 'Version tag for SMF (e.g., release-0.0.6)'
        required: true
        default: 'release-0.0.6'
      pcf_version:
        description: 'Version tag for PCF (e.g., release-0.0.4)'
        required: true
        default: 'release-0.0.4'
      nrf_version:
        description: 'Version tag for NRF (e.g., release-0.0.5)'
        required: true
        default: 'release-0.0.5'
      udm_version:
        description: 'Version tag for UDM (e.g., release-0.0.4)'
        required: true
        default: 'release-0.0.4'
     

jobs:
  pull_and_push_images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

     
      - name: Pull, Retag, and Push all Images from ios-mcn-core
        run: |
          
          declare -A CORE_PACKAGES
          CORE_PACKAGES=(
            ["5gc-amf"]="${{ github.event.inputs.amf_version }}"
            ["5gc-smf"]="${{ github.event.inputs.smf_version }}"
            ["5gc-pcf"]="${{ github.event.inputs.pcf_version }}"
            ["5gc-nrf"]="${{ github.event.inputs.nrf_version }}"
            ["5gc-udm"]="${{ github.event.inputs.udm_version }}"
            
          )
          
          
          for PACKAGE in "${!CORE_PACKAGES[@]}"; do
            VERSION=${CORE_PACKAGES[$PACKAGE]}
            SOURCE_IMAGE="ghcr.io/ios-mcn-core/${PACKAGE}:${VERSION}"
            TARGET_IMAGE="ghcr.io/test-ios-mcn-caze/${PACKAGE}:${VERSION}"  
            echo "Pulling ${SOURCE_IMAGE}..."
            docker pull ${SOURCE_IMAGE}
            echo "Retagging ${SOURCE_IMAGE} to ${TARGET_IMAGE}..."
            docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}
            echo "Pushing ${TARGET_IMAGE}..."
            docker push ${TARGET_IMAGE}
          done
