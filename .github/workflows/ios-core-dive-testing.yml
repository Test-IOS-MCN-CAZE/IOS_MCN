name: Pull, Retag, Compare, and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      # ... (keep all your existing inputs)

jobs:
  pull_retag_compare_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Pull, Retag, Compare, and Push Docker Images
        run: |
          # Define associative arrays for source and target versions
          declare -A SOURCE_VERSIONS=( 
            ["5gc-amf"]="${{ github.event.inputs.amf_source_version }}" 
            ["5gc-smf"]="${{ github.event.inputs.smf_source_version }}" 
            ["5gc-pcf"]="${{ github.event.inputs.pcf_source_version }}" 
            ["5gc-nrf"]="${{ github.event.inputs.nrf_source_version }}" 
            ["5gc-udm"]="${{ github.event.inputs.udm_source_version }}" 
          )
          
          declare -A TARGET_VERSIONS=( 
            ["5gc-amf"]="${{ github.event.inputs.amf_target_version }}" 
            ["5gc-smf"]="${{ github.event.inputs.smf_target_version }}" 
            ["5gc-pcf"]="${{ github.event.inputs.pcf_target_version }}" 
            ["5gc-nrf"]="${{ github.event.inputs.nrf_target_version }}" 
            ["5gc-udm"]="${{ github.event.inputs.udm_target_version }}" 
          )
          
          for PACKAGE in "${!SOURCE_VERSIONS[@]}"; do
            SOURCE_VERSION=${SOURCE_VERSIONS[$PACKAGE]}
            TARGET_VERSION=${TARGET_VERSIONS[$PACKAGE]}
            
            SOURCE_IMAGE="ghcr.io/ios-mcn-core/${PACKAGE}:${SOURCE_VERSION}"
            TARGET_IMAGE="ghcr.io/test-ios-mcn-caze/${PACKAGE}:${TARGET_VERSION}"
            
            echo "üì¶ Processing ${PACKAGE}..."
            echo "‚¨áÔ∏è Pulling ${SOURCE_IMAGE}..."
            docker pull ${SOURCE_IMAGE}
            
            echo "üè∑Ô∏è Retagging ${SOURCE_IMAGE} as ${TARGET_IMAGE}..."
            docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}
            
            # Comprehensive image comparison
            echo "üîç Comparing images..."
            
            # Compare image digests
            echo "Comparing image digests..."
            SOURCE_DIGEST=$(docker inspect ${SOURCE_IMAGE} --format='{{.Id}}')
            TARGET_DIGEST=$(docker inspect ${TARGET_IMAGE} --format='{{.Id}}')
            if [ "$SOURCE_DIGEST" = "$TARGET_DIGEST" ]; then
              echo "‚úÖ Image digests match"
            else
              echo "‚ùå Error: Image digests do not match"
              exit 1
            fi
            
            # Compare image sizes
            echo "Comparing image sizes..."
            SOURCE_SIZE=$(docker inspect ${SOURCE_IMAGE} --format='{{.Size}}')
            TARGET_SIZE=$(docker inspect ${TARGET_IMAGE} --format='{{.Size}}')
            if [ "$SOURCE_SIZE" = "$TARGET_SIZE" ]; then
              echo "‚úÖ Image sizes match"
            else
              echo "‚ùå Error: Image sizes do not match"
              exit 1
            fi
            
            # Compare image layers
            echo "Comparing image layers..."
            SOURCE_LAYERS=$(docker inspect ${SOURCE_IMAGE} --format='{{range .RootFS.Layers}}{{.}} {{end}}')
            TARGET_LAYERS=$(docker inspect ${TARGET_IMAGE} --format='{{range .RootFS.Layers}}{{.}} {{end}}')
            if [ "$SOURCE_LAYERS" = "$TARGET_LAYERS" ]; then
              echo "‚úÖ Image layers match"
            else
              echo "‚ùå Error: Image layers do not match"
              exit 1
            fi
            
            # Compare image configurations
            echo "Comparing image configurations..."
            docker inspect ${SOURCE_IMAGE} --format='{{json .Config}}' > source_config.json
            docker inspect ${TARGET_IMAGE} --format='{{json .Config}}' > target_config.json
            if cmp -s source_config.json target_config.json; then
              echo "‚úÖ Image configurations match"
            else
              echo "‚ùå Error: Image configurations do not match"
              exit 1
            fi
            
            echo "‚¨ÜÔ∏è Pushing ${TARGET_IMAGE}..."
            docker push ${TARGET_IMAGE}
            
            echo "‚úÖ Successfully processed ${PACKAGE}"
            echo "----------------------------------------"
          done
