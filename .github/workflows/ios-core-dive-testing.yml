name: Pull, Retag, Compare, and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      amf_source_version:
        description: 'Source Version for AMF'
        required: true
        default: 'release-0.0.10'
      amf_target_version:
        description: 'Target Version for AMF'
        required: true
        default: 'v1.2.33'
      smf_source_version:
        description: 'Source Version for SMF'
        required: true
        default: 'release-0.0.6'
      smf_target_version:
        description: 'Target Version for SMF'
        required: true
        default: 'v2.2.25'
      pcf_source_version:
        description: 'Source Version for PCF'
        required: true
        default: 'release-0.0.4'
      pcf_target_version:
        description: 'Target Version for PCF'
        required: true
        default: 'v1.5.51'
      nrf_source_version:
        description: 'Source Version for NRF'
        required: true
        default: 'release-0.0.5'
      nrf_target_version:
        description: 'Target Version for NRF'
        required: true
        default: 'v1.2.26'
      udm_source_version:
        description: 'Source Version for UDM'
        required: true
        default: 'release-0.0.4'
      udm_target_version:
        description: 'Target Version for UDM'
        required: true
        default: 'v1.1.61'

jobs:
  pull_retag_compare_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Dive
        run: |
          wget https://github.com/wagoodman/dive/releases/download/v0.10.0/dive_0.10.0_linux_amd64.deb
          sudo apt install ./dive_0.10.0_linux_amd64.deb

      - name: Pull, Retag, Compare, and Push Docker Images
        run: |
          # Define associative arrays for source and target versions
          declare -A SOURCE_VERSIONS=( 
            ["5gc-amf"]="${{ github.event.inputs.amf_source_version }}" 
            ["5gc-smf"]="${{ github.event.inputs.smf_source_version }}" 
            ["5gc-pcf"]="${{ github.event.inputs.pcf_source_version }}" 
            ["5gc-nrf"]="${{ github.event.inputs.nrf_source_version }}" 
            ["5gc-udm"]="${{ github.event.inputs.udm_source_version }}" 
          )
          
          declare -A TARGET_VERSIONS=( 
            ["5gc-amf"]="${{ github.event.inputs.amf_target_version }}" 
            ["5gc-smf"]="${{ github.event.inputs.smf_target_version }}" 
            ["5gc-pcf"]="${{ github.event.inputs.pcf_target_version }}" 
            ["5gc-nrf"]="${{ github.event.inputs.nrf_target_version }}" 
            ["5gc-udm"]="${{ github.event.inputs.udm_target_version }}" 
          )
          
          for PACKAGE in "${!SOURCE_VERSIONS[@]}"; do
            SOURCE_VERSION=${SOURCE_VERSIONS[$PACKAGE]}
            TARGET_VERSION=${TARGET_VERSIONS[$PACKAGE]}
            
            SOURCE_IMAGE="ghcr.io/ios-mcn-core/${PACKAGE}:${SOURCE_VERSION}"
            TARGET_IMAGE="ghcr.io/test-ios-mcn-caze/${PACKAGE}:${TARGET_VERSION}"
            
            echo "Processing ${PACKAGE}..."
            echo "Pulling ${SOURCE_IMAGE}..."
            docker pull ${SOURCE_IMAGE}
            
            echo "Retagging ${SOURCE_IMAGE} as ${TARGET_IMAGE}..."
            docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}
            
            # Compare images using docker inspect
            echo "Comparing images..."
            echo "Source image layers:"
            docker inspect ${SOURCE_IMAGE} -f '{{.RootFS.Layers}}' > source_layers.txt
            echo "Target image layers:"
            docker inspect ${TARGET_IMAGE} -f '{{.RootFS.Layers}}' > target_layers.txt
            
            # Compare layer digests
            if cmp -s source_layers.txt target_layers.txt; then
              echo "Image layers are identical"
            else
              echo "Warning: Image layers differ"
              exit 1
            fi
            
            # Compare image configs
            echo "Comparing image configurations..."
            docker inspect ${SOURCE_IMAGE} -f '{{.Config}}' > source_config.txt
            docker inspect ${TARGET_IMAGE} -f '{{.Config}}' > target_config.txt
            if cmp -s source_config.txt target_config.txt; then
              echo "Image configurations are identical"
            else
              echo "Image configurations differ"
              exit 1
            fi
            
            # Optional: Analyze individual images with dive
            echo "Analyzing source image with dive..."
            dive ${SOURCE_IMAGE} --ci
            
            echo "Pushing ${TARGET_IMAGE}..."
            docker push ${TARGET_IMAGE}
            
            echo "Completed processing ${PACKAGE}"
            echo "----------------------------------------"
          done
